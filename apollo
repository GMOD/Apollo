#!/bin/bash

function usage(){
    echo "";
    echo "Usage: apollo <command>";
    echo "";
    echo "Commands:";
    echo "";
    echo "deploy:           Builds Unoptimized war file (no processing of javascript) into the target directory.";
    echo "devmode:          Runs from current directory debug mode (non-minimized javascript).";
    echo "run-local <port>: Runs from current directory, but not in dev-mode. ";
    echo "test:             Runs test-suite.";
    echo "debug:            Runs from current directory in debug mode (non-minimized javascript).";
    echo "release:          Builds in release mode (minimized javascript). (advanced)";
    echo "compile:          Compiled the build.";
    echo "clean:            Removes class files.";
    echo "clean-all:        Removes class files and jbrowse files.";
    echo "create-rest-doc:  Recreates REST documentation.";
    echo "help:             This message.";
};


grails_executable=""

if [[ $# == 0 || $1 == help || $1 == --help ]]; then
    usage
    exit 1;
fi

function deploy_message(){
   echo "***************************************"
   echo "NOTE: Please set the memory for your servlet container (tomcat, jetty, etc.) or Apollo may not start correctly: http://webapollo.readthedocs.org/en/latest/Troubleshooting.html#tomcat-memory"
   echo "***************************************"
}

function check_node(){
    node_executable=$(which node)
    if ! [ -x "$node_executable" ] ; then
        nodejs_executable=$(which nodejs)
        if ! [ -x "$nodejs_executable" ] ; then
            echo "You must install 'Node JS' to do a release of Apollo."
            exit 1 ;
        else
            echo "Creating an alias 'node' for 'nodejs'"
            alias node="nodejs"
        fi
    fi
}

function check_perldependencies(){
    perl -e 'use Text::Markdown'
    if [ $? != 0 ] ; then
        echo "Perl package 'Text::Markdown' is required in order to do a release of Apollo."
        exit 1 ;
    fi
    perl -e 'use DateTime'
    if [ $? != 0 ] ; then
        echo "Perl package 'DateTime' is required in order to do a release of Apollo."
        exit 1 ;
    fi
}

function check_configs_for_release(){
    ant_executable=$(which ant)
    if ! [ -x "$ant_executable" ] ; then
        echo "You must install 'ant' to do a release of Apollo."
    fi
    check_node
    check_perldependencies
}

function check_configs(){

    grails_executable=$(which grails)
    git_executable=$(which git)

    if ! [ -x "$grails_executable" ] ; then
	   if [ -f 'grailsw' ]; then 
		   echo "Grails not found using grailsw";
		   grails_executable="./grailsw"
	   else
		   echo "You must install 'grails' to install Apollo."
		   exit 1 ;
		fi 
    fi
    if ! [ -x "$git_executable" ] ; then
       echo "You must install 'git' to install Apollo."
       exit 1 ;
    fi

}

function copy_configs(){
	rm -f src/java/apollo-config.groovy
    cp apollo-config.groovy src/java/apollo-config.groovy
}



if [[ $1 == "devmode" ]];then
    # should call the copy target first
    check_configs
    ant devmode &
    $grails_executable -reloading run-app  
elif [[ $1 == "run-local" ]];then
    # should call the copy target first
    check_configs
    if [[ $# == 2 ]]; then
        ant copy-resources gwtc && $grails_executable -Dserver.port=$2 run-app
    else
        ant copy-resources gwtc && $grails_executable run-app
    fi
elif [[ $1 == "debug" ]];then
    # TODO: feel like there is a better way to do this
    OLD_MAVEN_OPTS=$MAVEN_OPTS
    check_configs
	copy_configs
    export MAVEN_OPTS=-agentlib:jdwp=transport=dt_socket,address=5005,server=y,suspend=n
    ant devmode &
    $grails_executable -reloading debug
    export MAVEN_OPTS=$OLD_MAVEN_OPTS
    unset OLD_MAVEN_OPTS
elif [[ $1 == "test" ]];then
    # should call the copy target first
    check_configs
	copy_configs
    $grails_executable test-app
elif [[ $1 == "test-unit" ]];then
    # should call the copy target first
    check_configs
	copy_configs
    $grails_executable test-app :unit
#    mvn test
elif [[ $1 == "deploy" ]];then
    # should call the copy target first
    check_configs
    # this makes it globally available
    copy_configs
    #grails deploy
    ant copy-resources gwtc &&  $grails_executable war
    deploy_message
elif [[ $1 == "release" ]];then
    # should call the copy target first
    check_configs
    check_configs_for_release
    copy_configs
    ant clean-all release gwtc && $grails_executable war
    deploy_message
elif [[ $1 == "compile" ]];then
    # should call the copy target first
    check_configs
    ant gwtc && $grails_executable compile
elif [[ $1 == "create-rest-doc" ]];then
    check_configs
    # should call the copy target first
	# need to copy it 
    $grails_executable rest-api-doc && cp restapidoc.json web-app/js/restapidoc/
elif [[ $1 == "clean-all" ]];then
    # should call the copy target first
    check_configs
    rm -rf bin
    rm -rf jbrowse-download
    rm -rf JBrowse-dev
    rm -rf src/main/webapp/jbrowse
    rm -f *.zip
    ant clean-all
    $grails_executable clean 
elif [[ $1 == "clean" ]];then
    # should call the copy target first
    check_configs
    ant clean &&  $grails_executable clean
else
    usage
fi
