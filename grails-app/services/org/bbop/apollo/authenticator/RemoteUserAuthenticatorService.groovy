package org.bbop.apollo.authenticator

import grails.transaction.Transactional
import org.apache.shiro.SecurityUtils
import org.apache.shiro.authc.UsernamePasswordToken
import org.apache.shiro.crypto.hash.Sha256Hash
import org.apache.shiro.session.Session
import org.apache.shiro.subject.Subject
import org.bbop.apollo.User
import org.bbop.apollo.gwt.shared.ClientTokenGenerator

import javax.servlet.http.HttpServletRequest

@Transactional
class RemoteUserAuthenticatorService implements AuthenticatorService{


    //    @Override
    def authenticate(UsernamePasswordToken authToken,HttpServletRequest request) {
        try {
            request.putAt("REMOTE_USER","abcd@123.com")
            String remoteUser = request.getHeader("REMOTE_USER")
            authToken.username = remoteUser
            User user = User.findByUsername(authToken.username)
            if(!user){

                String randomPassword = ClientTokenGenerator.generateRandomString()
                String passwordHash = new Sha256Hash(randomPassword).toHex()

                // TODO: created a reversible autogenerated database
//                String mungedString = randomPassword.reverse()

                user = new User(
                    username: user.username,
                    passwordHash:passwordHash,
                    firstName: user.username,
                    lastName: user.lastName,
                    metadata : ["generated":randomPassword]// reversible autogenerated password
                ).save(insert: true,flush: true)
            }

            // retrieve reversed string
            String generatedPassword = user.metadata.generated

            authToken.password = generatedPassword as char[]

            Subject subject = SecurityUtils.getSubject();
//            Session session = request.getSession(true)
//            Session session = subject.getSession(true);
            subject.login(authToken)
            if (!subject.authenticated) {
                log.error "Failed to authenticate user ${authToken.username}"
                return false
            }
        } catch (Exception ae) {
            log.error("Problem authenticating: " + ae.fillInStackTrace())
            return false
        }
    }
}
