<?xml version="1.0" encoding="utf-8" ?>
<project name="Apollo" default="usage" basedir=".">
    <!-- Arguments to gwtc and devmode targets -->
    <property name="gwt.args" value=""/>

    <!-- Configure path to GWT SDK -->
    <property name="gwt.sdk" location="gwt-sdk"/>

    <path id="project.class.path">
        <pathelement location="target/classes/gwt"/>
        <pathelement location="lib/gwt"/>
        <pathelement location="${gwt.sdk}/gwt-user.jar"/>
        <pathelement location="${gwt.sdk}/gwt-dev.jar"/>
        <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
        <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
        <fileset dir="lib/gwt" includes="**/*.jar"/>
        <!-- Add any additional non-server libs (such as JUnit) here -->
    </path>

    <target name="javac" description="Compile java source to bytecode">
        <mkdir dir="target/classes/gwt"/>
        <javac srcdir="src/gwt" includes="**" encoding="utf-8"
               destdir="target/classes/gwt"
               includeantruntime="false"
               source="1.8" target="1.8" nowarn="true"
               debug="true" debuglevel="lines,vars,source">
            <classpath refid="project.class.path"/>
        </javac>
        <copy todir="target/classes">
            <fileset dir="src" excludes="**/*.java"/>
        </copy>
    </target>

    <target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler" maxmemory="256m">
            <classpath>
                <pathelement location="src/gwt"/>
                <path refid="project.class.path"/>
            </classpath>
            <arg line="-war"/>
            <arg value="web-app"/>
            <!--            <arg line="-style"/>-->
            <!--            <arg value="PRETTY"/>-->
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg line="${gwt.args}"/>
            <arg value="org.bbop.apollo.gwt.Annotator"/>
        </java>
    </target>

    <target name="devmode" depends="javac"
            description="Run development mode (pass -Dgwt.args=-nosuperDevMode to fallback to classic DevMode)">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode" maxmemory="1g">
            <classpath>
                <pathelement location="src/gwt"/>
                <path refid="project.class.path"/>
                <pathelement location="${gwt.sdk}/gwt-codeserver.jar"/>
            </classpath>
            <arg value="-startupUrl"/>
            <arg value="http://localhost:8080/apollo/annotator/"/>
            <arg line="-war"/>
            <arg value="web-app"/>
            <!-- Additional arguments like -style PRETTY, -logLevel DEBUG or -nosuperDevMode -->
            <arg line="${gwt.args}"/>
            <arg value="org.bbop.apollo.gwt.Annotator"/>
            <arg value="org.bbop.apollo.gwt.Annotator"/>
        </java>
    </target>


    <!--<target name="build" depends="gwtc" description="Build this project"/>-->

    <property name="grails-clean" value="false"/>


    <property name="apollo.webapp.directory" location="web-app" relative="true" basedir="."/>
    <property name="apollo.jbrowse.directory" location="${apollo.webapp.directory}/jbrowse"/>
    <property name="apollo.client.directory" location="${basedir}/client/apollo" basedir="." relative="true"/>
    <property name="apollo.plugin.directory" location="${apollo.jbrowse.directory}/plugins/WebApollo"/>
    <property name="jbrowse.download.directory" location="jbrowse-download"/>
    <property name="jbrowse.webapp.test.file" location="${apollo.jbrowse.directory}/src/dojo/dojo.js"/>
    <property name="webapp.apollo.plugin.test.file" location="${apollo.plugin.directory}/js/main.js"/>
    <property name="webapp.apollo.plugin.uncompressed.test.file"
              location="${apollo.plugin.directory}/js/main.js.uncompressed.js"/>
    <property name="scripts.directory" location="scripts"/>
    <property name="jbrowse.git.test.file" location="${jbrowse.download.directory}/src/dojo/dojo.js"/>
    <property name="jbrowse.github" value="https://github.com/gmod/jbrowse"/>
    <property name="jbrowse.version" value="dev"/>
    <property name="jbrowse.perl.dependency.test.file" value="bin/flatfile-to-json.pl"/>

    <property name="jbrowse.release.version" value="1.11.6-release"/>

    <available file=".git" type="dir" property="git.present"/>
    <available file="${jbrowse.git.test.file}" type="file" property="jbrowse.git.present"/>
    <available file="${jbrowse.webapp.test.file}" type="file" property="jbrowse.webapp.installed"/>
    <available file="${webapp.apollo.plugin.test.file}" type="file" property="apollo.plugin.installed"/>
    <available file="${jbrowse.perl.dependency.test.file}" type="file" property="jbrowse.perl.installed"/>
    <available file="${webapp.apollo.plugin.uncompressed.test.file}" type="file" property="jbrowse.precompiled"/>

    <target name="build.jbrowse" description="Build JBrowse using the build/Makefile">
        <exec executable="sh" failifexecutionfails="false">
            <arg value="-c"/>
            <arg line="'ulimit -n 1000; cd ${jbrowse.download.directory} &amp;&amp; make -f build/Makefile RELEASE_VERSION=dev release-notest'"/>
        </exec>
    </target>

    <target name="unoptimized" description="unoptimized" depends="cloneJBrowse,copy.apollo.plugin.jbrowse">
        <copy todir="${apollo.jbrowse.directory}">
            <fileset dir="${jbrowse.download.directory}">
                <exclude name="sample_data/**"/>
                <exclude name="node_modules/**"/>
                <exclude name="tests/**"/>
            </fileset>
        </copy>
        <delete dir="${apollo.jbrowse.directory}/.git"/>
        <echo>${jbrowse.download.directory}</echo>
    </target>

    <target name="release" description=""
            depends="cloneJBrowse,copy.apollo.plugin.jbrowse,build.jbrowse,install.jbrowse.perl">
        <copy file="${jbrowse.download.directory}/JBrowse-${jbrowse.version}.zip" todir="${basedir}"/>
        <exec executable="unzip" failifexecutionfails="false" errorproperty="">
            <arg value="JBrowse-${jbrowse.version}.zip"/>
        </exec>
        <move todir="${apollo.jbrowse.directory}">
            <fileset dir="JBrowse-${jbrowse.version}">
                <exclude name="sample_data/**"/>
                <exclude name="node_modules/**"/>
                <exclude name="tests/**"/>
            </fileset>
        </move>
        <delete file="JBrowse-${jbrowse.version}.zip"/>
        <delete dir="JBrowse-${jbrowse.version}"/>
    </target>

    <target name="debug" description=""
            depends="cloneJBrowse,copy.apollo.plugin.jbrowse,build.jbrowse">
        <copy file="${jbrowse.download.directory}/JBrowse-${jbrowse.version}-dev.zip" todir="${basedir}"/>
        <exec executable="unzip" failifexecutionfails="false" errorproperty="">
            <arg value="JBrowse-${jbrowse.version}-dev.zip"/>
        </exec>
        <move todir="${apollo.jbrowse.directory}">
            <fileset dir="JBrowse-${jbrowse.version}-dev"/>
        </move>
        <delete file="JBrowse-${jbrowse.version}-dev.zip"/>
        <delete dir="JBrowse-${jbrowse.version}-dev"/>
    </target>


    <target name="git.clean" description="Remove all unstaged files from ${basedir}">
        <exec executable="git" failifexecutionfails="false" errorproperty="">
            <arg value="clean"/>
            <arg value="-fdx"/>
        </exec>
    </target>

    <target name="cloneJBrowse" description="Clone git repository." unless="jbrowse.git.present">
        <exec executable="git" failifexecutionfails="false" errorproperty="">
            <arg value="clone"/>
            <arg value="--recursive"/>
            <arg value="${jbrowse.github}"/>
            <arg value="${jbrowse.download.directory}"/>
        </exec>
        <exec executable="git" failifexecutionfails="false" errorproperty="" dir="${jbrowse.download.directory}">
            <arg value="checkout"/>
            <arg value="tags/${jbrowse.release.version}"/>
        </exec>
    </target>


    <target name="usage">
        <exec executable="./apollo" failifexecutionfails="false" errorproperty=""/>
    </target>

    <target name="install.jbrowse.perl" description="Install jbrowse." if="jbrowse.git.present"
            unless="jbrowse.perl.installed">
        <exec executable="./install_jbrowse.sh" failifexecutionfails="true" failonerror="true"
              errorproperty="jbrowse-fail">
            <arg value="${jbrowse.download.directory}"/>
        </exec>
    </target>

    <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--always"/>
            <arg value="HEAD"/>
        </exec>
        <condition property="repository.version" value="${git.revision}" else="unknown">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
    </target>


    <target name="setup-jbrowse" unless="jbrowse.webapp.installed">
        <antcall target="cloneJBrowse"/>
        <antcall target="copy.apollo.plugin.jbrowse"/>


        <echo>Will be setting up jbrowse</echo>
        <delete dir="${apollo.jbrowse.directory}"/>

        <copy todir="${apollo.jbrowse.directory}">
            <fileset dir="${jbrowse.download.directory}">
                <exclude name="sample_data/**"/>
                <exclude name="node_modules/**"/>
                <exclude name="tests/**"/>
            </fileset>
        </copy>
        <antcall target="install.jbrowse.perl"/>

    </target>

    <target name="copy.apollo.plugin.jbrowse">
        <echo>copying plugin to jbrowse git ...</echo>
        <copy todir="${jbrowse.download.directory}/plugins/WebApollo" failonerror="true">
            <fileset dir="${apollo.client.directory}"/>
        </copy>
    </target>

    <target name="copy.apollo.plugin.webapp" unless="jbrowse.precompiled" if="jbrowse.webapp.installed"
            description="Copy client into webapp plugin directory.">
        <echo>Copying WebApollo plugin to jbrowse webapp ...</echo>
        <copy todir="${apollo.jbrowse.directory}/plugins/WebApollo" failonerror="true">
            <fileset dir="${apollo.client.directory}"/>
        </copy>
    </target>

    <target name="copy-jbrowse-into-webapp">
        <copy todir="${apollo.jbrowse.directory}">
            <fileset dir="${jbrowse.download.directory}">
                <exclude name="sample_data/**"/>
                <exclude name="node_modules/**"/>
                <exclude name="tests/**"/>
            </fileset>
        </copy>
    </target>


    <target name="copy-resources-dev"
            depends="copy.apollo.plugin.webapp,copy-jbrowse-into-webapp"
            description="This is called externally by shell script.">

    </target>


    <target name="copy-resources"
            depends="copy.apollo.plugin.webapp,setup-jbrowse"
            description="This is called externally by shell script.">

    </target>

</project>
